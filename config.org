#+TITLE: Jesse Oldroyd's Emacs/Prelude configuration

This file describes my =Emacs= configuration, which is built on top of
[[https://github.com/bbatsov/prelude?tab=readme-ov-file][Prelude]]. This file currently focuses on including resources for creating notes
with Org mode, particularly via =org-noter= and =org-roam=. Support for BibTeX
will be provided by [[https://github.com/emacs-citar/citar?tab=readme-ov-file][=citar=]], [[https://github.com/emacs-citar/citar-org-roam][=citar-org-roam=]] and =org-cite=.

* General settings and packages
** =Emacs= settings
   General settings for =emacs=.
   #+begin_src emacs-lisp
     ;; On Windows, commands like rgrep appear to use the wrong "find" command:
     ;; https://stackoverflow.com/questions/3918341/find-parameter-format-not-correct
     (when (eq system-type 'windows-nt)
       (setq find-program "C:\\msys64\\usr\\bin\\find.exe"))
   #+end_src
** UI and navigation settings
   See karthink's [[https://karthinks.com/software/avy-can-do-anything/][blog post]] for ideas on using Avy and its associated commands.
   #+begin_src emacs-lisp
     ;; Enables highlighted lines.
     (global-hl-line-mode 1)
     (set-face-background 'hl-line "#2f3849")
     (set-face-foreground 'highlight nil)

     ;; Prelude hides the toolbar, so turn it back on.
     (tool-bar-mode 1)

     ;; Set fontface and size
     (when (eq system-type 'windows-nt)
       (set-face-attribute 'default nil :font "Consolas" :height 140))
     (when (eq system-type 'darwin)
       (set-face-attribute 'default nil :font "FiraCode Nerd Font" :height 140))

     ;; Default to vertical split instead of horizontal split
     ;; (setq split-width-threshold 1)

     ;; Default to fullscreen. Taken from
     ;; https://stackoverflow.com/questions/78245398/how-can-i-make-emacsclient-open-in-native-fullscreen-every-time-i-launch-it-fr
     (setq ns-use-native-fullscreen :true)
     (add-to-list 'default-frame-alist '(fullscreen . fullscreen))

     ;; I follow karthink's suggestion and combine Avy with Isearch.
     (define-key isearch-mode-map (kbd "M-j") 'avy-isearch)
   #+end_src
** Keybinds
   We need to tell emacs how to interpret certain keys on MacBook
   keyboards. While we're at it, we'll set up some useful keybinds for moving
   through paragraphs.
   #+begin_src emacs-lisp
     ;; macOS bindings assume use of karabiner to remap caps lock and
     ;; return to control. Note that left option key is left unbound. Note
     ;; that control cannot be rebound without overwriting karabiner binds.
     (when (eq system-type 'darwin)
       (setq mac-right-command-modifier 'meta
             mac-right-option-modifier 'super
             mac-control-modifier 'control
             mac-option-modifier nil))

     (global-set-key "\M-p" 'backward-paragraph)
     (global-set-key "\M-n" 'forward-paragraph)

     ;; Prelude uses S-arrow for windmove keybindings which conflicts with org-mode
     ;; basics. Therefore we use C-arrow prefix instead. On macOS this appears to
     ;; only work with right-command, as left-control (on laptop) has different
     ;; result.
     (windmove-default-keybindings 'ctrl)

     ;; For use with MacBook trackpad. This allows the track pad to be used with
     ;; fly spell-mode. This uses Option+click for Mouse-2 and Cmd+click for
     ;; mouse-3.
     (setq mac-emulate-three-button-mouse t)
   #+end_src
** Completion and templates/snippets
   We use =vertico= and =yasnippet= from Prelude. These might be redundant.

   I'm also using Marginalia to provide =marginalia-mode= to provide more
   information on completions. On top of this, I include Embark for the
   =embark-act= function. This also needs to be integrated with Consult which is
   provided by Prelude. The configuration for both of these is the suggested
   config on GitHub.
   #+begin_src emacs-lisp
     ;; Configure directory extension for vertico to look more like ido.
     (use-package vertico-directory
       :after vertico
       :ensure nil
       ;; More convenient directory navigation commands
       :bind (:map vertico-map
                   ("RET" . vertico-directory-enter)
                   ("DEL" . vertico-directory-delete-char)
                   ("M-DEL" . vertico-directory-delete-word))
       ;; Tidy shadowed file names
       :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

     ;; Enable YASnippet.
     (use-package yasnippet
       :ensure t)
     (yas-global-mode 1)

     ;; Enable rich annotations using the Marginalia package
     (use-package marginalia
       ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
       ;; available in the *Completions* buffer, add it to the
       ;; `completion-list-mode-map'.
       :bind (:map minibuffer-local-map
                   ("M-A" . marginalia-cycle))



       ;; The :init section is always executed.
       :init

       ;; Marginalia must be activated in the :init section of use-package such that
       ;; the mode gets enabled right away. Note that this forces loading the
       ;; package.
       (marginalia-mode))

     (use-package embark
       :ensure t

       :bind
       (("C-." . embark-act)         ;; pick some comfortable binding
        ("C-;" . embark-dwim)        ;; good alternative: M-.
        ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

       :init

       ;; Optionally replace the key help with a completing-read interface
       (setq prefix-help-command #'embark-prefix-help-command)

       ;; Show the Embark target at point via Eldoc. You may adjust the
       ;; Eldoc strategy, if you want to see the documentation from
       ;; multiple providers. Beware that using this can be a little
       ;; jarring since the message shown in the minibuffer can be more
       ;; than one line, causing the modeline to move up and down:

       ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
       ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

       :config

       ;; Hide the mode line of the Embark live/completions buffers
       (add-to-list 'display-buffer-alist
                    '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                      nil
                      (window-parameters (mode-line-format . none)))))

     ;; Consult users will also want the embark-consult package.
     (use-package embark-consult
       :ensure t ; only need to install it, embark loads it after consult if found
       :hook
       (embark-collect-mode . consult-preview-at-point-mode))
   #+end_src

** Shells
   Settings for enhancing the shell in emacs. Note that =sage-shell-mode=
   requires SageMath, which is tricky to get on Windows.
   #+begin_src emacs-lisp
     ;;  emacs-sage-shell
     (use-package sage-shell-mode
       :ensure t)

     ;; AucTeX keybindings for SageTeX with emacs-sage-shell
     ;; From Github documentation
     (eval-after-load "latex"
       '(mapc (lambda (key-cmd) (define-key LaTeX-mode-map (car key-cmd) (cdr key-cmd)))
              `((,(kbd "C-c s c") . sage-shell-sagetex:compile-current-file)
                (,(kbd "C-c s C") . sage-shell-sagetex:compile-file)
                (,(kbd "C-c s r") . sage-shell-sagetex:run-latex-and-load-current-file)
                (,(kbd "C-c s R") . sage-shell-sagetex:run-latex-and-load-file)
                (,(kbd "C-c s l") . sage-shell-sagetex:load-current-file)
                (,(kbd "C-c s L") . sage-shell-sagetex:load-file)
                (,(kbd "C-c C-z") . sage-shell-edit:pop-to-process-buffer))))
   #+end_src
** Miscellaneous packages and settings
   Packages that don't fit anywhere else just yet.
   #+begin_src emacs-lisp
     ;; Enables writegood-mode.
     (use-package writegood-mode
       :ensure t)
     (global-set-key "\C-c\C-wg" 'writegood-mode)

     ;; Set ispell and args for spellchecking
     (setq ispell-program-name "aspell")
     (setq ispell-extra-args '("--lang=en_US"))

     ;; Set flyspell to use mouse-3 instead of mouse-2.
     ;; Taken from
     ;; https://emacs.stackexchange.com/a/32930
     (eval-after-load "flyspell"
       '(progn
          (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
          (define-key flyspell-mouse-map [mouse-3] #'undefined)))

     ;; Tell ispell to chill so it doesn't slow down my buffer.
     ;; Taken from
     ;; https://github.com/syl20bnr/spacemacs/issues/311#issuecomment-215110131
     (with-eval-after-load 'flyspell
       (require 'flyspell-lazy)
       (flyspell-lazy-mode 1)
       (setq ;; Be a little more aggressive than the lazy defaults
        flyspell-lazy-idle-seconds 2 ;; This scans just the recent changes
        flyspell-lazy-window-idle-seconds 6 ;; This scans the whole window
        )
       )

     ;; Create nice html exports of buffers
     (use-package htmlize)
   #+end_src

* Enhancing modes for files
  The packages here improve/replace how emacs handles certain files.
** PDF-tools
   The =pdf-tools= package replaces emacs' own DocView mode for viewing PDF
   files (and others) within emacs itself. This will need to be configured to
   work with AUCTeX below.
   #+BEGIN_SRC emacs-lisp
     ;; Taken from
     ;; https://www.reddit.com/r/emacs/comments/gm1c2p/pdftools_installation/
     (use-package pdf-tools
       :ensure t
       :config
       (pdf-tools-install)
       (setq-default pdf-view-display-size 'fit-page))

     ;; Apparently line numbers break horizontal scrolling in PDF Tools.
     ;; Code below taken from
     ;; emacs.stackexchange.com/questions/74317/how-can-i-get-horizontal-scrolling-in-pdfview-to-work
     (defun bugfix-display-line-numbers--turn-on (fun &rest args)
       "Avoid `display-line-numbers-mode' in `image-mode' and related.
     Around advice for FUN with ARGS."
       (unless (derived-mode-p 'image-mode 'docview-mode 'pdf-view-mode)
         (apply fun args)))

     (advice-add 'display-line-numbers--turn-on :around #'bugfix-display-line-numbers--turn-on)
   #+END_SRC
** AUCTeX
   These are settings for working with LaTeX documents in emacs. This requires
   AUCTeX, which is included with Prelude modules.
   #+BEGIN_SRC emacs-lisp
     ;; LaTeX-mode settings
     (add-hook 'LaTeX-mode-hook 'visual-line-mode)
     (add-hook 'LaTeX-mode-hook 'flyspell-mode)
     (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
     (setq reftex-plug-into-AUCTeX t)

     ;; Enables rainbow-highlighters for LaTeX.
     (add-hook 'LaTeX-mode-hook #'rainbow-delimiters-mode)
     (add-hook 'TeX-mode-hook #'rainbow-delimiters-mode)

     ;; AUCTeX's live preview requires ghostscript, so we tell AUCTeX where to
     ;; find it on macOS. Live preview on Windows is very troublesome, so we
     ;; don't worry about it.
     (when (eq system-type 'darwin)
       (setq preview-gs-command "/usr/local/bin/gs"))


     ;; Change inline math delimiters that AUCTeX and CDLaTeX
     ;; insert from $...$ to \(...\)
     (setq TeX-electric-math (cons "\\(" ""))
     (setq cdlatex-use-dollar-to-ensure-math nil)

     ;; Reset TeX-open/close-quote from Prelude definitions
     (setq TeX-open-quote "``")
     (setq TeX-close-quote "''")

     ;; latexmk settings
     ;; Use Skim as viewer, enable source <-> PDF sync
     ;; make latexmk available via C-c C-c
     ;; Note: SyncTeX is setup via ~/.latexmkrc (see below)
     (add-hook 'LaTeX-mode-hook (lambda ()
                                  (push
                                   '("latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
                                     :help "Run latexmk on file")
                                   TeX-command-list)))

     ;; AucTeX and latexmk don't get along on Windows, so don't worry about
     ;; setting up AUCTeX for latexmk on Windows
     (when (eq system-type 'darwin)
       (add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk"))))
     (when (eq system-type 'windows-nt)
       (add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default LaTeX-command))))

     ;; Prettify symbols in TeX
     (add-hook 'TeX-mode-hook #'prettify-symbols-mode)

     ;; Code below is taken from
     ;; https://emacs.stackexchange.com/questions/19472/how-to-let-auctex-open-pdf-with-pdf-tools
     ;; Use pdf-tools to open PDF files
     (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
           TeX-source-correlate-mode t
           TeX-source-correlate-start-server t
           TeX-source-correlate-method (quote synctex))

     ;; Update PDF buffers after successful LaTeX runs
     (add-hook 'TeX-after-compilation-finished-functions
               #'TeX-revert-document-buffer)
   #+END_SRC
** =mu4e=
   Mail configuration with =emacs=, =mu= and =mu4e=. At the moment this is just
   =macOS= specific. This is adapted from this [[https://macowners.club/posts/email-emacs-mu4e-macos/#initial-sync][blog post]]. Setting up =mbsync=
   also required setting an app specific password for iCloud.
   #+begin_src emacs-lisp
     (use-package mu4e
       :load-path  "/opt/homebrew/share/emacs/site-lisp/mu/mu4e")

     ;; for sending mails
     (require 'smtpmail)

     ;; we installed this with homebrew
     (setq mu4e-mu-binary (executable-find "mu"))

     ;; this is the directory we created before:
     ;; (setq mu4e-maildir "~/.maildir")

     ;; this command is called to sync imap servers:
     (setq mu4e-get-mail-command (concat (executable-find "mbsync") " -a"))
     ;; how often to call it in seconds:
     (setq mu4e-update-interval 300)

     ;; save attachment to desktop by default
     ;; or another choice of yours:
     (setq mu4e-attachment-dir "~/Desktop")

     ;; rename files when moving - needed for mbsync:
     (setq mu4e-change-filenames-when-moving t)

     ;; Change HTML display for dark color schemes
     (setq shr-color-visible-luminance-min 80)
   #+end_src
   We also need to configure =mu4e= for multiple accounts. This configuration is
   adapted from [[https://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and/#configuring-mu4e][this blog post]]. It looks like we need to set ~tls_starttls = on~
   in the ~.msmtprc~ file for this to work properly.
   #+begin_src emacs-lisp
     (setq send-mail-function 'sendmail-send-it
           sendmail-program "/opt/homebrew/bin/msmtp"
           mail-specify-envelope-from t
           message-sendmail-envelope-from 'header
           mail-envelope-from 'header)

     (setq mu4e-contexts
           `( ,(make-mu4e-context
                :name "gmail"
                :match-func (lambda (msg) (when msg
                                            (string-prefix-p "/gmail" (mu4e-message-field msg :maildir))))
                :vars '(
                        (mu4e-trash-folder . "/gmail/[Gmail]/Trash")
                        (mu4e-refile-folder . "/gmail/[Gmail]/Archive")
                        (user-mail-address . "math.oldroyd@gmail.com")
                        ))
              ,(make-mu4e-context
                :name "wvwc-mail"
                :match-func (lambda (msg) (when msg
                                            (string-prefix-p "/gmail" (mu4e-message-field msg :maildir))))
                :vars '(
                        (mu4e-trash-folder . "/wvwc-mail/[wvwc-mail]/Trash")
                        (mu4e-refile-folder . "/wvwc-mail/[wvwc-mail]/Archive")
                        (user-mail-address . "oldroyd.j@wvwc.edu")
                        ))
              ,(make-mu4e-context
                :name "icloud"
                :match-func (lambda (msg) (when msg
                                            (string-prefix-p "/icloud" (mu4e-message-field msg :maildir))))
                :vars '(
                        (mu4e-trash-folder . "/icloud/Deleted Messages")
                        (mu4e-refile-folder . "/icloud/Archive")
                        (user-
                         mail-address . "j.oldroyd@icloud.com")
                        ))
              ))
   #+end_src

* Org mode
** UI settings
   It's easier to read if we limit horizontal text to 80 characters wide. We
   also want to enable flyspell in Org buffers along with LaTeX previews.
   #+begin_src emacs-lisp
     ;; Org mode 80 character limit
     ;; Taken from
     ;; https://emacs.stackexchange.com/questions/35266/org-mode-auto-new-line-at-80th-column
     (add-hook 'org-mode-hook '(lambda () (setq fill-column 80)))
     (add-hook 'org-mode-hook 'auto-fill-mode)

     ;; Make Org bullets a little nicer
     (use-package org-bullets
       :ensure t)
     (add-hook 'org-mode-hook
               (lambda ()
                 (org-bullets-mode 1)))

     ;; Buffer previews and spellcheck
     (setq org-src-fontify-natively t)
     (add-hook 'org-mode-hook 'flyspell-mode)
     (setq org-latex-create-formula-image-program 'dvipng)

     ;; Default dvipng alist setting caused issues with org LaTeX previews. This
     ;; is fixed by implementing code below, taken from:
     ;; https://emacs.stackexchange.com/questions/57898/getting-latex-preview-to-work-with-org-mode-dvi-not-found
     (let ((png (cdr (assoc 'dvipng org-preview-latex-process-alist))))
       (plist-put png :latex-compiler '("latex -interaction nonstopmode -output-directory %o %F"))
       (plist-put png :image-converter '("dvipng -D %D -T tight -o %O %F"))
       (plist-put png :transparent-image-converter '("dvipng -D %D -T tight -bg Transparent -o %O %F")))

     ;; Set Org-mode indentation
     (setq org-adapt-indentation t)
   #+end_src
** Agenda and capture settings
   Org-agenda is one of the best reasons to become familiar with Org mode. We
   need to set up our agenda files and capture templates/keybinds.
   #+BEGIN_SRC emacs-lisp
     ;; This is for key bindings to invoke agenda mode (see line-2)
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cc" 'org-capture)
     (global-set-key "\C-cb" 'org-iswitchb)

     ;;Changes TODO to done automatically if children tasks done
     (defun org-summary-todo (n-done n-not-done)
       "Switch entry to DONE when all subentries are done, to TODO otherwise."
       (let (org-log-done org-log-states)   ; turn off logging
         (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

     (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)

     ;; Define the custum capture templates
     (setq org-capture-templates
           '(("t" "Todo" entry (file org-default-notes-file)
              "* TODO %?\n%u\n%a\n" :clock-in t :clock-resume t)
             ("m" "Meeting" entry (file org-default-notes-file)
              "* MEETING with %? :MEETING:\n%t" :clock-in t :clock-resume t)
             ("d" "Diary" entry (file+datetree "~/org/diary.org")
              "* %?\n%U\n" :clock-in t :clock-resume t)
             ("i" "Idea" entry (file org-default-notes-file)
              "* %? :IDEA: \n%t" :clock-in t :clock-resume t)
             ("f" "Fleeting note" entry  (file org-default-notes-file)
              "* TODO %^{Note title}\nContext: %a\n%?" :empty-lines-before 1 )
             ("n" "Next Task" entry (file+headline org-default-notes-file "Tasks")
              "** NEXT %? \nDEADLINE: %t") ))

     ;; Sets up org-mode files for capture/refile.
     (when (eq system-type 'darwin)
       (setq org-agenda-files '("~/Documents/org"
                                "~/Google Drive/My Drive/org"
                                "~/Library/Mobile Documents/com~apple~CloudDocs/Documents/org"))
       (setq org-default-notes-file
             (expand-file-name "~/Documents/org/notes.org")))

     (setq org-refile-targets
           '((nil :maxlevel . 3)
             (org-agenda-files :maxlevel . 3)))
   #+END_SRC
** Note-taking
   This config is adapted from the recommended config for [[https://github.com/org-roam/org-roam-bibtex][=org-roam=]]. The
   keybinds need to be modified slightly so as not to conflict with Prelude's
   =crux= keybinds. To avoid cursing like a sailor, note that =org-roam= is
   activated by visiting an appropriate node and then using
   ~org-roam-buffer-toggle~, which is bound to ~C-c m l~ below. This will
   activate another window that shows backlinks for a given node where the point
   is.
   #+BEGIN_SRC emacs-lisp
     (use-package org-roam
       :ensure t
       :custom
       (org-roam-directory "~/Library/Mobile Documents/com~apple~CloudDocs/Documents/org/roam")
       :bind (("C-c m l" . org-roam-buffer-toggle)
              ("C-c m f" . org-roam-node-find)
              ("C-c m g" . org-roam-graph)
              ("C-c m i" . org-roam-node-insert)
              ("C-c m c" . org-roam-capture)
              ;; Dailies for journaling
              ("C-c m j" . org-roam-dailies-capture-today))
       :config
       ;; If you're using a vertical completion framework, you might want a
       ;; more informative completion interface
       (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
       (org-roam-db-autosync-mode)
       ;; If using org-roam-protocol
       (require 'org-roam-protocol))

     (use-package org-noter)
   #+END_SRC
** BibTeX
   The location of the bibliography file needs to be set. We can use the
   variable =bib-file= which is part of =bib-mode.el=. This might be used by
   AUCTeX as well, so why not set it here. The location of the Google Drive file
   probably depends on the OS, so we account for that here as well.

   For =citar=, we also configure it to work with =org-roam= and =embark=. For
   now, a decent workflow seems to be the following:
   1. Open a file using ~citar-open~. With the =org-roam= integration, this file
      should ideally be an =org-roam= file. With a fair amount of profanity this
      can be made to happen.
   2. In the file just opened, use ~org-noter~ to associate it with the
      corresponding PDF (if it exists). Be sure to add in any relevant
      =org-roam= nodes as well. Using keywords from the article and placing
      corresponding nodes under ~:PROPERTIES:~ (say, with a ~:KEYWORDS:~
      property) for =org-roam= to refer to might be the best approach here.
   3. Take any relevant notes on the paper with =org-noter=. Be sure to
      highlight appropriately using ~C-c C-a h~ and place precise notes with
      ~M-i~. Highlighted sections are probably best used for placing notes
      specific to the paper (such as explaining some mathematical computation)
      while annotation with =org-noter= should focus on observations that I wish
      to refer to outside of the paper.
   #+BEGIN_SRC emacs-lisp
     (when (eq system-type 'darwin)
       (setq bib-file '("~/Google Drive/My Drive/research/library.bib")))
     (when (eq system-type 'windows-nt)
       (setq bib-file '("C:\\Users\\oldroyd.j\\My Drive\\research\\library.bib")))

     (use-package citar
       :custom
       (citar-bibliography bib-file)
       (org-cite-global-bibliography bib-file)
       (org-cite-insert-processor 'citar)
       (org-cite-follow-processor 'citar)
       (org-cite-activate-processor 'citar)
       :hook
       (LaTeX-mode . citar-capf-setup)
       (org-mode . citar-capf-setup))
     (use-package citar-org-roam
       :after (citar org-roam)
       :config (citar-org-roam-mode))
     (use-package citar-embark
       :after citar embark
       :no-require
       :config (citar-embark-mode))

     ;; Set library paths for Citar and specify JabRef behavior on Windows
     (cond
      ((eq system-type 'windows-nt)
       (setq citar-library-paths '("C:\\Users\\oldroyd.j\\My Drive\\research")))
      ((eq system-type 'darwin)
       (setq citar-library-paths '("~/Google Drive/My Drive/research"))))
     (when (eq system-type 'darwin)
       (setq citar-notes-paths '("~/Google Drive/My Drive/research")))

     ;; On Windows I use JabRef, so I need to tell Citar how to parse JabRef
     ;; file links
     (eval-after-load "citar"
       '(defun citar-file--parser-triplet (file-field)
          "Return a list of files from DIRS and a FILE-FIELD formatted as a triplet.

                  This is file-field format seen in, for example, Calibre and Mendeley.

                  NEW EXAMPLE: '<phrase>:/path/to/paper.pdf:PDF:<url>
                  Example: ':/path/to/test.pdf:PDF'."
          (let (filenames)
            (dolist (sepchar '(?\; ?,))         ; Mendeley and Zotero use ;, Calibre uses ,
              (dolist (substring (citar-file--split-escaped-string file-field sepchar))
                (let* ((triplet (citar-file--split-escaped-string substring ?:))
                       (len (length triplet)))
                  (when (>= len 3)
                    ;; If there are more than three components, we probably split on unescaped : in the filename.
                    ;; Take all but the first and last components of TRIPLET and join them with :
                    ;; (let* ((escaped (string-join (butlast (cdr triplet)) ":"))
                    (let* ((escaped (string-join (butlast (cdr triplet) 2) ":")) ;; JabRef has extra :, so drop last two elements
                           (filename (replace-regexp-in-string "\\\\\\(.\\)" "\\1" escaped)))
                      ;; Calibre doesn't escape file names in BIB files, so try both
                      ;; See https://github.com/kovidgoyal/calibre/blob/master/src/calibre/library/catalogs/bibtex.py
                      (push filename filenames)
                      (push escaped filenames))))))
            (nreverse filenames))))
   #+END_SRC

** =org-babel= settings
   We need to configure =org-babel= for evaluation of ~SRC~ blocks in Org mode.
   #+begin_src emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((octave . t)))
   #+end_src

* Packages to consider adding
** =ledger-mode=
   This would be part of a larger project making use of the =ledger= CLI program
   to keep track of my finances and budget. One example of use is located [[https://www.reddit.com/r/emacs/comments/8x4xtt/tip_how_i_use_ledger_to_track_my_money/][here]].
** =elfeed=
   This looks like a good way to keep track of arXiv papers.
** =org-reveal=
   Create ~reveal.js~ based slideshows using Org mode.
** =matlab=mode=
   This will be useful for using MATLAB in Org files.

   #  LocalWords:  Keybinds
